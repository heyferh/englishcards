package com.feku.englishcards.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.feku.englishcards.dao.util.DaoSession;
import com.feku.englishcards.entity.Card;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EnglishWord = new Property(1, String.class, "englishWord", false, "ENGLISH_WORD");
        public final static Property RussianWord = new Property(2, String.class, "russianWord", false, "RUSSIAN_WORD");
        public final static Property Favourite = new Property(3, Boolean.class, "favourite", false, "FAVOURITE");
        public final static Property DictionaryId = new Property(4, long.class, "dictionaryId", false, "DICTIONARY_ID");
    };

    private Query<Card> dictionary_CardListQuery;

    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ENGLISH_WORD\" TEXT NOT NULL ," + // 1: englishWord
                "\"RUSSIAN_WORD\" TEXT NOT NULL ," + // 2: russianWord
                "\"FAVOURITE\" INTEGER," + // 3: favourite
                "\"DICTIONARY_ID\" INTEGER NOT NULL );"); // 4: dictionaryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEnglishWord());
        stmt.bindString(3, entity.getRussianWord());
 
        Boolean favourite = entity.getFavourite();
        if (favourite != null) {
            stmt.bindLong(4, favourite ? 1L: 0L);
        }
        stmt.bindLong(5, entity.getDictionaryId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // englishWord
            cursor.getString(offset + 2), // russianWord
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // favourite
            cursor.getLong(offset + 4) // dictionaryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnglishWord(cursor.getString(offset + 1));
        entity.setRussianWord(cursor.getString(offset + 2));
        entity.setFavourite(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setDictionaryId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cardList" to-many relationship of Dictionary. */
    public List<Card> _queryDictionary_CardList(long dictionaryId) {
        synchronized (this) {
            if (dictionary_CardListQuery == null) {
                QueryBuilder<Card> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DictionaryId.eq(null));
                dictionary_CardListQuery = queryBuilder.build();
            }
        }
        Query<Card> query = dictionary_CardListQuery.forCurrentThread();
        query.setParameter(0, dictionaryId);
        return query.list();
    }

}
